// Generated by CoffeeScript 1.6.2
var addDebugFlags, addDefinesSpecially, addRegularArgument, addRegularArguments, allInQuotes, deepExtend, exec, executeJar, getFlexHome, getPlatformForTarget, inQuotes, is_plain_obj, packageTargets, pushToDeepMember, pushToMember,
  __slice = [].slice;

exec = require('child_process').exec;

packageTargets = {
  android: ["apk", "apk‑captive‑runtime", "apk-debug", "apk-emulator", "apk-profile"],
  ios: ["ipa-ad-hoc", "ipa-app-store", "ipa-debug", "ipa-test", "ipa-debug-interpreter", "ipa-debug-interpreter-interpreter-simulator", "ipa-test-interpreter", "ipa-test-interpreter-simulator"],
  air: ["air", "airn", "ane", "native"]
};

packageTargets.all = [].concat(packageTargets.air).concat(packageTargets.android).concat(packageTargets.ios);

pushToMember = function(target, member, value) {
  return (target[member] || (target[member] = [])).push(value);
};

getFlexHome = function(args) {
  var e, flexHome;

  flexHome = args.flexHome || process.env.FLEX_HOME;
  try {
    if (!flexHome) {
      throw new Error("Set the environment variable 'FLEX_HOME' to a valid flex sdk");
    }
  } catch (_error) {
    e = _error;
    throw e;
  }
  return flexHome;
};

inQuotes = function(text) {
  text = text.replace(/\\/g, "\\\\").replace(/\"/g, "\\\"");
  return "\"" + text + "\"";
};

is_plain_obj = function(obj) {
  var has_is_property_of_method, has_own, has_own_constructor, key, _i, _len;

  if (!obj || {}.toString.call(obj) !== '[object Object]' || obj.nodeType || obj.setInterval) {
    return false;
  }
  has_own = {}.hasOwnProperty;
  has_own_constructor = has_own.call(obj, 'constructor');
  has_is_property_of_method = has_own.call(obj.constructor.prototype, 'isPrototypeOf');
  if (obj.constructor && !has_own_constructor && !has_is_property_of_method) {
    return false;
  }
  key === void 0;
  for (_i = 0, _len = obj.length; _i < _len; _i++) {
    key = obj[_i];
    continue;
  }
  return key === void 0 || has_own.call(obj, key);
};

allInQuotes = function(input) {
  var part, pos, result, _i, _len;

  result = [];
  if (input != null) {
    for (pos = _i = 0, _len = input.length; _i < _len; pos = ++_i) {
      part = input[pos];
      result[pos] = inQuotes(part);
    }
  }
  return result;
};

deepExtend = function(a, b) {
  var name, nowValue, part, target, value, _i, _len, _ref;

  target = {};
  _ref = [a, b];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    part = _ref[_i];
    for (name in part) {
      value = part[name];
      nowValue = target[name];
      if (nowValue === value) {

      } else if (Array.isArray(value) && Array.isArray(nowValue)) {
        target[name] = nowValue.concat(value);
      } else if (is_plain_obj(value) && is_plain_obj(nowValue)) {
        target[name] = deepExtend(nowValue, value);
      } else {
        target[name] = value;
      }
    }
  }
  return target;
};

addDebugFlags = function(flags, useDebugFlag) {
  flags['CONFIG::release'] = !useDebugFlag;
  return flags['CONFIG::debug'] = useDebugFlag;
};

addDefinesSpecially = function(args, argList, useDebugFlag) {
  var name, value, _ref, _ref1;

  if (useDebugFlag == null) {
    useDebugFlag = false;
  }
  if ((_ref = args.define) == null) {
    args.define = {};
  }
  addDebugFlags(args.define, useDebugFlag);
  _ref1 = args.define;
  for (name in _ref1) {
    value = _ref1[name];
    if (typeof value === "string") {
      value = inQuotes("'" + value + "'");
    } else {
      value = value.toString();
    }
    argList.push("-define=" + name + "," + value);
  }
  return argList;
};

addRegularArgument = function(name, value, separator) {
  var arg;

  arg = "-" + name + separator;
  if (typeof value === "string") {
    if (!isNaN(parseInt(value))) {
      return arg += value;
    } else if (value.toLowerCase() === "true") {
      return arg += "true";
    } else if (value.toLowerCase() === "false") {
      return arg += "false";
    } else {
      return arg += inQuotes(value);
    }
  } else {
    return arg += allInQuotes(value).join(",");
  }
};

addRegularArguments = function() {
  var argList, args, ignore, name, separator, value;

  args = arguments[0], argList = arguments[1], separator = arguments[2], ignore = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
  for (name in args) {
    value = args[name];
    if (ignore.indexOf(name) === -1) {
      argList.push(addRegularArgument(name, value, separator));
    }
  }
  return argList;
};

pushToDeepMember = function(target, member, value) {
  var childName, childNode, dotIndex;

  dotIndex = member.indexOf(".");
  if (dotIndex !== -1) {
    childName = member.substring(0, dotIndex);
    member = member.substring(dotIndex + 1);
    childNode = target[childName] || (target[childName] = {});
    return pushToMember(childNode, member, value);
  } else {
    return pushToMember(target, member, value);
  }
};

getPlatformForTarget = function(target) {
  if (packageTargets.android.indexOf(target) !== -1) {
    return 'android';
  } else if (packageTargets.ios.indexOf(target) !== -1) {
    return 'ios';
  }
};

executeJar = function(jar, args, root, onComplete) {
  var cmd, start;

  start = Date.now();
  cmd = "java -Xmx384m -Djava.awt.headless=true -Dsun.io.useCanonCaches=false -jar \"" + jar + "\" " + args;
  console.info(cmd);
  return exec(cmd, {
    cwd: root
  }, function(error, stdout, stderr) {
    var result;

    if (onComplete) {
      result = {
        cmd: cmd,
        error: error,
        stderr: stderr,
        stdout: stdout,
        path: root,
        duration: Date.now() - start
      };
      if (error) {
        return onComplete(result, null);
      } else {
        return onComplete(null, result);
      }
    } else {
      if (error) {
        return console.error(stderr);
      } else {
        return console.info(stdout);
      }
    }
  });
};

module.exports = {
  packageTargets: packageTargets,
  getPlatformForTarget: getPlatformForTarget,
  pushToMember: pushToMember,
  deepExtend: deepExtend,
  getFlexHome: getFlexHome,
  inQuotes: inQuotes,
  allInQuotes: allInQuotes,
  addDefinesSpecially: addDefinesSpecially,
  addRegularArguments: addRegularArguments,
  addRegularArgument: addRegularArgument,
  pushToDeepMember: pushToDeepMember,
  executeJar: executeJar,
  genericAdt: require("./genericAdt"),
  parseXml: require("./parseXml")
};
