// Generated by CoffeeScript 1.6.2
var ExpatParser, fs, safe;

fs = require('fs');

ExpatParser = require('node-expat').Parser;

safe = function(parser, error, mtd) {
  return function() {
    var text;

    try {
      return mtd.apply(null, arguments);
    } catch (_error) {
      text = _error;
      return error(text);
    }
  };
};

module.exports = function(path, format, onComplete) {
  return fs.readFile(path, function(err, dataInput) {
    var current, data, error, firstNode, hasError, msg, parser, tree, treeNames;

    if (err) {
      return onComplete(err);
    } else {
      data = {};
      current = format(data);
      firstNode = null;
      treeNames = [];
      tree = [];
      parser = new ExpatParser("utf-8");
      hasError = false;
      msg = "";
      error = function(err) {
        hasError = true;
        parser.stop();
        return onComplete(err, null);
      };
      parser.on("startElement", safe(parser, error, function(nodeType, attributes) {
        if (!hasError) {
          if (current !== void 0) {
            tree.push(current);
          }
          current = current ? current[nodeType] : null;
          if (current === void 0) {
            throw "Unexpected node type " + treeNames.join(">") + (">" + nodeType + " @ " + path);
          }
          if (typeof current === "function") {
            current = current(attributes);
          }
          return treeNames.push(nodeType);
        }
      }));
      parser.on("endElement", safe(parser, error, function(nodeType) {
        var currentNodeName;

        if (!hasError) {
          currentNodeName = treeNames.pop();
          if (nodeType !== currentNodeName) {
            error("Trying to close block '" + currentNodeName + "' with '" + nodeType + "'");
          }
          if (current === void 0) {
            throw "Unexpected end of the block '" + nodeType + "'";
          } else if (current && current.$end) {
            current.$end();
          }
          return current = tree.pop();
        }
      }));
      parser.on("text", safe(parser, error, function(txt) {
        if (current && current.$text) {
          return current.$text(txt);
        }
      }));
      if (!parser.parse(dataInput.toString(), true)) {
        return onComplete(new Error(("Error while parsing: " + path + ": ") + parser.getError()));
      } else {
        return onComplete(null, {
          path: path,
          data: data
        });
      }
    }
  });
};
